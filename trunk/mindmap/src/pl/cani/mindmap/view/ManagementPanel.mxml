<?xml version="1.0" encoding="utf-8"?>
<mx:Panel xmlns:mx="http://www.adobe.com/2006/mxml" title="Mindmap management" 
	layout="absolute" creationComplete="onCreationComplete()" 
	resizeEffect="{resizeEffect}" xmlns:view="pl.cani.mindmap.view.*">

	<mx:Script>
		<![CDATA[
			import com.mikenimer.components.Debug;
			import mx.controls.listClasses.IListItemRenderer;
			import mx.collections.ArrayCollection;
			import mx.events.CollectionEvent;
			import mx.controls.Alert;
			import pl.cani.mindmap.model.MindmapPrivilages;
			import mx.events.DataGridEvent;
			import pl.cani.mindmap.view.helpers.PrivilagesPanelHelper;
			import pl.cani.mindmap.model.MindmapUserPair;
			import com.adobe.cairngorm.model.ModelLocator;
			import mx.managers.PopUpManager;
			import mx.events.DragEvent;
			import com.asual.swfaddress.SWFAddress;
			import com.adobe.cairngorm.control.CairngormEventDispatcher;
			import pl.cani.mindmap.business.SessionAndPersitentData;
			import pl.cani.mindmap.events.MindmapEvent;
			import pl.cani.mindmap.model.AppModelLocator;
			import mx.resources.ResourceBundle;
			import pl.cani.mindmap.view.helpers.ViewNames;
			import com.adobe.cairngorm.view.ViewLocator;
			import pl.cani.mindmap.view.helpers.ManagementPanelHelper;
			
			import mx.effects.easing.*;
			
			private var helper : ManagementPanelHelper;
			
			[ResourceBundle( "ManagementPanel" )]
			private var rb : ResourceBundle;
			
			[Bindable]
			private var saveMindmap : String = rb.getString( "saveMindmap" );
			
			
			private function onCreationComplete() : void {
				helper = new ManagementPanelHelper( this );
				ViewLocator.getInstance().register( ViewNames.MANAGEMENT_PANEL, 
					helper );
				
				AppModelLocator.getInstance().mindmapUsersDataGrid 
					= mindmapUsersDataGrid;
				
				helper.findMindmaps();
							
				show.play();
			}
			
			private function onKeyDown( event : KeyboardEvent ) : void {
				if ( event.keyCode == Keyboard.ENTER ) {
					helper.createMindmap();
				}
			}
			
			private function onGrantPrivilagesBtnClick() : void {
				SWFAddress.setValue( ViewNames.PRIVILAGES );
				AppModelLocator.getInstance().mainView.currentState = 'privilages';
			}
			
			public function onDragDrop( event : DragEvent ) : void {
				var privilagesWindow : PrivilagesWindow = new PrivilagesWindow();

				var pairs : Array = helper.convertToPairs( 
						event.dragSource.dataForFormat( "items" ) as Array );

				privilagesWindow.dataProvider = pairs;
				event.dragSource.addData( pairs, "items" );

				PopUpManager.addPopUp( privilagesWindow, 
					AppModelLocator.getInstance().mainView, true );
				PopUpManager.centerPopUp( privilagesWindow );
				
				var privilagesHelper : PrivilagesPanelHelper 
					= ViewLocator.getInstance().getViewHelper( ViewNames.PRIVILAGES )
					as PrivilagesPanelHelper;
					
				privilagesHelper.resetInfo();
			}
			
			private function displayUserName( pair : MindmapUserPair, 
					column : DataGridColumn ) : String {
				return pair.user.forname + " " + pair.user.surname;
			}
			
			private function displayUserEmail( pair : MindmapUserPair,
					column : DataGridColumn ) : String {
				return pair.user.email;
			}
			
			private function onItemEditEnd( event : DataGridEvent ) : void {
  				var dataGrid : DataGrid = event.target as DataGrid;
  				var itemEditorInstance : IListItemRenderer 
					= event.target.itemEditorInstance;
  				var column : DataGridColumn = dataGrid.columns[ event.columnIndex ];
  				var newValue : Boolean = itemEditorInstance[ column.editorDataField ];
  				
  				Debug.show( "praży to?" );
  				
//  				if ( event.dataField == "canRead" && newValue == false ) {
//  					( dataGrid.dataProvider as ArrayCollection )
//  					.removeItemAt( event.rowIndex );
//  				} //else {
	  				var pair : MindmapUserPair = dataGrid.dataProvider[ event.rowIndex ];
	  				pair[ event.dataField ] = newValue;
	  				
	  				var mindmapEvent : MindmapEvent = new MindmapEvent(
	  					MindmapEvent.SET_PRIVILAGES_FOR_USER );
	  				mindmapEvent.mindmapUserPair = pair;
					// TODO: włączyć eventa  				
//	  				CairngormEventDispatcher.getInstance().dispatchEvent( mindmapEvent );
//	  			}
			}
			
		]]>
	</mx:Script>

	<mx:Resize id="resizeEffect" duration="200" easingFunction="Quintic.easeInOut" />

	<mx:Sequence id="show" target="{this}">
		<mx:SetPropertyAction name="visible" value="false" />
		<mx:Zoom zoomHeightFrom="0" zoomWidthFrom="0" duration="500"
			easingFunction="Quintic.easeInOut"
			tweenStart="this.visible = true" />
	</mx:Sequence>

	<mx:states>
		<mx:State name="createMindmap" enterState="focusManager.setFocus( mindmapNameTxt )">
			<mx:AddChild relativeTo="{vbox1}" position="lastChild">
				<mx:TextInput id="mindmapNameTxt" keyDown="onKeyDown( event )" />
			</mx:AddChild>
			<mx:SetProperty target="{createMindMapBtn}" name="label" 
				value="{ saveMindmap }" />
			<mx:SetEventHandler target="{createMindMapBtn}" name="click" 
				handler="helper.createMindmap()"/>
		</mx:State>
	</mx:states>

	<mx:VBox bottom="10" top="10" id="vbox1" right="10" left="10">
	
		<mx:HBox width="100%">
			<mx:Label text="@Resource( 'myMindmaps' )" id="myMindmapsLbl"/>
			<mx:ComboBox id="mindmapsCbx" change="helper.findMindmapUsers( event )"
				dataProvider="{ AppModelLocator.getInstance().myMindmaps }"
				resizeEffect="{resizeEffect}" />
		</mx:HBox>
	
		<mx:DataGrid id="mindmapUsersDataGrid" dropEnabled="true"
			dragDrop="onDragDrop( event )" itemEditEnd="onItemEditEnd( event )">
			<mx:columns>
				<mx:DataGridColumn labelFunction="displayUserName" 
					headerText="@Resource( key = 'fullname', bundle = 'Generic' )" 
					 />
				<mx:DataGridColumn labelFunction="displayUserEmail"
					headerText="E-mail" />
				<mx:DataGridColumn dataField="canRead" 
					headerText="@Resource( key = 'read', bundle = 'Generic' )">
					<mx:itemRenderer>
						<mx:Component>
							<view:CheckBoxRenderer dataField="canRead" />
						</mx:Component>
					</mx:itemRenderer>
				</mx:DataGridColumn>
				<mx:DataGridColumn dataField="canWrite" 
					headerText="@Resource( key = 'write', bundle = 'Generic' )">
					<mx:itemRenderer>
						<mx:Component>
							<view:CheckBoxRenderer dataField="canWrite" />
						</mx:Component>
					</mx:itemRenderer>
				</mx:DataGridColumn>
			</mx:columns>
		</mx:DataGrid>
	
		<mx:HBox width="100%">
			<mx:Button label="@Resource( 'grantPrivilages' )" id="grantPrivilagesBtn"
				click="onGrantPrivilagesBtnClick()"/>
			<mx:Button label="@Resource( 'createMindmap' )" id="createMindMapBtn" click="currentState = 'createMindmap'"/>
		</mx:HBox>
	
	</mx:VBox>
	
</mx:Panel>